services:
  samba:
    image: dperson/samba
    container_name: samba
    restart: always
    command: |
      {% for user in SAMBA -%}
      -u "{{ user.USER }};{{ user.PASS }}"
      -s "{{ user.USER }};/{{ user.USER }};yes;no"
      {% endfor -%}
      -s "media;/media;yes;no"
      -s "backup;/backup;yes;no"
      -s "timemachine;/timemachine;yes;no"
    stdin_open: true
    tty: true
    environment:
      - TZ={{ TIMEZONE }}
    ports:
      - 139:139
      - 445:445
    volumes:
      - "{{ STORAGE }}/shared/media:/media"
      - "{{ BACKUP }}:/backup"
      - "{{ TIMEMACHINE }}:/timemachine"
      {% for user in SAMBA -%}
      - {{ STORAGE }}/files/{{ user.USER }}:/{{ user.USER }}
      {% endfor %}

  plex:
    image: lscr.io/linuxserver/plex:latest
    container_name: plex
    hostname: plex
    restart: unless-stopped
    network_mode: host
    environment:
      - PUID={{ PUID }}
      - PGID={{ PGID }}
      - VERSION=docker
      - TZ={{ TIMEZONE }} 
      - PLEX_CLAIM={{ PLEX_CLAIM }}
      - UMASK=022
    volumes:
      - "{{ DOCKER_CONFIG }}/plex:/config"
      - "{{ NEW_STORAGE }}/media:/data/media"

  tautulli:
    image: lscr.io/linuxserver/tautulli:latest
    container_name: tautulli
    environment:
      - PUID={{ PUID }}
      - PGID={{ PGID }}
      - TZ={{ TIMEZONE }}
      - UMASK_SET=022
    volumes:
      - "{{ DOCKER_CONFIG }}/tautulli:/config"
    ports:
      - 8181:8181
    restart: unless-stopped
    
  qbittorrent:
    image: lscr.io/linuxserver/qbittorrent:latest
    container_name: qbittorrent
    networks:
      - arr
    environment:
      - PUID={{ PUID }}
      - PGID={{ PGID }}
      - TZ={{ TIMEZONE }}
      - UMASK_SET=022
      - WEBUI_PORT=8083
      - TORRENTING_PORT=6881
    volumes:
      - "{{ DOCKER_CONFIG }}/qbittorrent/appdata:/config"
      - "{{ NEW_STORAGE }}/torrents:/data/torrents"
    ports:
      - 8083:8083
      - 6881:6881
      - 6881:6881/udp
    restart: unless-stopped

  overseerr:
    image: lscr.io/linuxserver/overseerr:latest
    container_name: overseerr
    networks:
      - arr
    environment:
      - PUID={{ PUID }}
      - PGID={{ PGID }}
      - TZ={{ TIMEZONE }}
    volumes:
      - "{{ DOCKER_CONFIG }}/overseerr:/config"
    ports:
      - 5055:5055
    restart: unless-stopped

  radarr:
    image: lscr.io/linuxserver/radarr:latest
    container_name: radarr
    networks:
      - arr
    environment:
      - PUID={{ PUID }}
      - PGID={{ PGID }}
      - TZ={{ TIMEZONE }}
      - UMASK_SET=022
    volumes:
      - "{{ DOCKER_CONFIG }}/radarr:/config"
      - "{{ NEW_STORAGE }}:/data"
    ports:
      - 7878:7878
    restart: unless-stopped

  sonarr:
    image: lscr.io/linuxserver/sonarr:latest
    container_name: sonarr
    networks:
      - arr
    environment:
      - PUID={{ PUID }}
      - PGID={{ PGID }}
      - TZ={{ TIMEZONE }}
      - UMASK_SET=022
    volumes:
      - "{{ DOCKER_CONFIG }}/sonarr:/config"
      - "{{ NEW_STORAGE }}:/data"
    ports:
      - 8989:8989
    restart: unless-stopped

  prowlarr:
    image: lscr.io/linuxserver/prowlarr:latest
    container_name: prowlarr
    networks:
      - arr
    environment:
      - PUID={{ PUID }}
      - PGID={{ PGID }}
      - TZ={{ TIMEZONE }}
    volumes:
      - "{{ DOCKER_CONFIG }}/prowlarr:/config"
    ports:
      - 9696:9696
    restart: unless-stopped

  flaresolverr:
    image: ghcr.io/flaresolverr/flaresolverr:latest
    container_name: flaresolverr
    networks:
      - arr
    environment:
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - LOG_HTML=${LOG_HTML:-false}
      - CAPTCHA_SOLVER=${CAPTCHA_SOLVER:-none}
      - TZ={{ TIMEZONE }}
    ports:
      - "${PORT:-8191}:8191"
    restart: unless-stopped
  
  pihole:
    container_name: pihole
    image: pihole/pihole:latest
    ports:
      - "53:53/tcp"
      - "53:53/udp"
      - "67:67/udp"
      - "8080:80/tcp"
    environment:
      - TZ={{ TIMEZONE }}
      - WEBPASSWORD={{ PIHOLE_WEB_PASS }}
      - DNSMASQ_LISTENING=all
      - WEBTHEME=default-dark
    volumes:
      - '{{ DOCKER_CONFIG }}/pihole/etc-pihole/:/etc/pihole/'
      - '{{ DOCKER_CONFIG }}/pihole/etc-dnsmasq.d/:/etc/dnsmasq.d/'
    cap_add:
      - NET_ADMIN
    restart: unless-stopped
  
  watchtower:
    container_name: watchtower
    image: containrrr/watchtower:latest
    ports:
      - 8282:8080
    environment:
      - WATCHTOWER_CLEANUP=true
      - WATCHTOWER_INCLUDE_RESTARTING=true
      - WATCHTOWER_INCLUDE_STOPPED=true
      - WATCHTOWER_REVIVE_STOPPED=false
      - WATCHTOWER_NO_RESTART=false
      - WATCHTOWER_TIMEOUT=30s
      - WATCHTOWER_SCHEDULE={{WATCHTOWER_CRON}}
      - WATCHTOWER_DEBUG=false
      - WATCHTOWER_NOTIFICATION_URL=telegram://{{TELEGRAM.TOKEN}}@telegram/?channels={{TELEGRAM.CHAT_ID}}
      - TZ={{ TIMEZONE }}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    restart: unless-stopped

  kopia:
    image: kopia/kopia:latest
    hostname: kopia
    container_name: kopia
    ports:
      - 51515:51515
    command:
      - server
      - start
      - --disable-csrf-token-checks
      - --insecure
      - --enable-actions
      - --address=0.0.0.0:51515
      - --server-username={{CONTAINER_USER}}
      - --server-password={{KOPIA_UI_PASS}}
    environment:
      - TZ={{ TIMEZONE }}
      - USER={{ CONTAINER_USER }}
      - KOPIA_PASSWORD={{ KOPIA_REPO_PASS }}
    volumes:
      - "{{ DOCKER_CONFIG }}/kopia/config:/app/config"
      - "{{ DOCKER_CONFIG }}/kopia/cache:/app/cache"
      - "{{ DOCKER_CONFIG }}/kopia/logs:/app/logs"
      - "{{ DOCKER_CONFIG }}:/data/docker:ro"
      - "{{ STORAGE }}/files:/data/files:ro"
      - "{{ BACKUP }}/kopia:/backups:shared"
      - "{{ USER_PATH }}/scripts:/scripts:ro"
    restart: unless-stopped

  tailscale:
    image: tailscale/tailscale:latest
    container_name: tailscale
    hostname: tailscale
    network_mode: host
    privileged: true
    environment:
      - TS_AUTHKEY={{ TAILSCALE_AUTHKEY }}?ephemeral=false
      - TS_STATE_DIR=/var/lib/tailscale
      - TS_EXTRA_ARGS=--advertise-tags=tag:container --advertise-routes={{ LOCAL_SUBNET }}
    volumes:
      - "{{ DOCKER_CONFIG }}/tailscale/state:/var/lib/tailscale"
      - "{{ DOCKER_CONFIG }}/tailscale/config:/config"
      - /dev/net/tun:/dev/net/tun
    cap_add:
      - net_admin
      - sys_module
    restart: unless-stopped

  unifi:
    image: jacobalberty/unifi:latest
    container_name: unifi
    environment:
      - PUID={{ PUID }}
      - PGID={{ PGID }}
      - TZ={{ TIMEZONE }}
      - UMASK_SET=022
      - UNIFI_HTTP_PORT=8081
    volumes:
      - "{{ DOCKER_CONFIG }}/unifi/config:/unifi"
    ports:
      - 8443:8443
      - 3478:3478/udp
      - 10001:10001/udp
      - 8081:8081
      - 1900:1900/udp #optional
      - 8843:8843 #optional
      - 8880:8880 #optional
      - 6789:6789 #optional
      - 5514:5514/udp #optional
    restart: unless-stopped

  netdata:
    image: netdata/netdata:latest
    container_name: netdata
    hostname: netdata
    network_mode: host
    pid: host
    cap_add:
      - SYS_PTRACE
      - SYS_ADMIN
    security_opt:
      - apparmor:unconfined
    volumes:
      - "{{ DOCKER_CONFIG }}/netdata/config:/etc/netdata"
      - "{{ DOCKER_CONFIG }}/netdata/lib:/var/lib/netdata"
      - "{{ DOCKER_CONFIG }}/netdata/cache:/var/cache/netdata"
      - /:/host/root:ro,rslave
      - /etc/passwd:/host/etc/passwd:ro
      - /etc/group:/host/etc/group:ro
      - /etc/localtime:/etc/localtime:ro
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /etc/os-release:/host/etc/os-release:ro
      - /var/log:/host/var/log:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    restart: unless-stopped
    
networks:
  arr:
